#!/usr/bin/env python3

import os
from lib.types import Module, Endpoint
from lib.utils import type2typescript
from texts import texts as TEMPL

# ==================================================================================================
# INTERNAL FUNCTIONS
# ==================================================================================================
def _def_snippets ( snippets: dict[str,str] ):
	if not snippets.get ( '__initial_state', '' ).strip():
		snippets['__initial_state'] = """
	// TODO: check this autogenerated code
	admin: {
		rows: []
	}
		"""

	if not snippets.get ( '_system_paths', '' ).strip():
		snippets[ '_system_paths' ]: """
/*
 * Here you should put the paths that will be exposed to /admin/path/name
 * every path must contain a 'perms' property that will be used to check permissions
 * and a 'comp' property that will contain the React component to render
 */
// system_path [ '/path/name' ] = {
// perms: [ 'post', 'create' ],
// comp: () => dynamic( () => import( './modules/_PostList' ), { ssr: false } ),
// };
		"""

	if not snippets.get ( '_import', '' ).strip():
		snippets[ '_import' ] = ''

	if not snippets.get ( '__state', '' ).strip():
		snippets[ '__state' ] = ''

def _perms ( snippets: dict[str,str], mod: Module ):
	res = []
	for perm in mod.permissions.values ():
		n = {
			"name": perm.name.split ( '.' )[-1],
			"description": perm.description,
		}
		res.append(TEMPL['PERM_ROW'] % n)

	snippets['_perms'] = '\n'.join(res )

def _menu_item ( menu: any, mod: Module ):
	perm = mod.permissions.get ( menu [ "perm" ] )

	if perm:
		perm = perm.name
	else:
		perm = menu [ 'perm' ]

	return {
		"name": menu [ "name" ],
		"perm": perm,
		"link": menu [ "path" ],
		"description": menu [ "description" ],
	}


# ==================================================================================================
# CLASS METHODS
# ==================================================================================================
def generate_file_initial_state ( self, mod: Module, output: str ):
	mod_name = self.mod_name( mod )

	# create the output directory
	outfile = os.path.join( output, "src", "modules", mod_name, "initial_state.ts" )
	fout = self.create_file( outfile, mod )

	_def_snippets ( self.snippets )
	_perms ( self.snippets, mod )

	self.snippets[ 'module_name' ] = mod.name
	self.snippets[ 'module_name_low' ] = mod.name.lower()
	self.snippets['_menus'] = ',\n\t'.join ( [ str ( _menu_item ( menu, mod ) ) for menu in mod.menus ] )

	fout.write(TEMPL['REDUCER_STATE'] % self.snippets)

	# close the output file
	fout.close()
	print( "Generated", outfile )
