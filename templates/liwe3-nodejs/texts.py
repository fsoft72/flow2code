#!/usr/bin/env python3

texts = {
	"HEADER_START": """/* This file has been generated by flow2code
* See: https://flow.liwe.org
*/

import { ILRequest, ILResponse, ILError, ILiWE } from '../../liwe/types';
import { send_error, send_ok, typed_dict } from "../../liwe/utils";
import { locale_load } from '../../liwe/locale';

import { perms } from '../../liwe/auth';

import {
	%(__methods)s
} from './methods';

import {
	User, UserActivationCode, UserFaceRec, UserPerms, UserRegistration, UserSessionData
} from './types';

// d2r_start __header
%(__header)s
// d2r_end __header

export const init = ( liwe: ILiWE ) => {
	const app = liwe.app;

	console.log( "    - %(__name_camel)s " );

	liwe.cfg.app.languages.map( ( l ) => locale_load( "%(__name_lower)s", l ) );
	user_db_init ( liwe );
""",
	"HEADER_END": """
};
""",

	"ENDPOINT": """
	app.%(__method_lower)s ( '/api%(url)s', %(__perms)s( req: ILRequest, res: ILResponse ) => {
		%(__typed_dict)s

		%(__endpoint_name)s ( %(__params)s( err: ILError, user: User ) => {
			if ( err ) return send_error( res, err );

			send_ok( res, { user } );
		} );
	} );
""",
		"TYPED_DICT": '{ name: "%(name)s", type: "%(type)s"%(_req_param)s }',
		"TYPED_DICT_OBJ": '{ name: "%(name)s", type: %(type)sObj%(_req_param)s }',
		"METHODS_FILE_START": """
import { ILRequest, ILResponse, LCback, ILiweConfig, ILError, ILiWE } from '../../liwe/types';
import { mkid } from '../../liwe/utils';
import { collection_add, collection_count, collection_count_dict, collection_find_all, collection_find_one, collection_find_one_dict, collection_find_all_dict, collection_del_one_dict, collection_del_all_dict, collection_init, prepare_filters } from '../../liwe/arangodb';
import { DocumentCollection } from 'arangojs/collection';
import { $l } from '../../liwe/locale';

import {
	%(__interfaces)s
} from './types';

let _liwe: ILiWE = null;

const _ = ( txt: string, vals: any = null, plural = false ) => {
	return $l( txt, vals, plural, "%(__name_lower)s" );
};

%(__collections)s

/*=== d2r_start __file_header === */
%(__file_header)s
/*=== d2r_end __file_header ===*/

""",
	"METHODS_FILE_END": """\n""",
	"TYPE_COLL_VAR": "let _coll_%s: DocumentCollection = null",
	"TYPE_COLL_CONST": "const COLL_%s = '%s'",

	"FOLDING_EP_START": """// {{{ %(endpoint_name)s ( req: ILRequest, %(__parameters)scback: LCBack = null ): Promise<%(return_type)s>""",
	"FOLDING_END": """// }}}\n\n""",
	"EP_TYPED_PARAM": "%(name)s%(opt)s: %(type)s%(param_default)s",
	"EP_DOC_FIELD": "@param %(name)s - %(doc)s [%(_is_req)s]",
	"EP_DOC_RETURN": "@return %(name)s: %(type)s%(doc)s",
	"EP_START": """
/**
%(__description)s
 */
export const %(endpoint_name)s = ( req: ILRequest, %(__parameters)scback: LCback = null ): Promise<%(return_type)s> => {
	return new Promise( async ( resolve, reject ) => {
		/*=== d2r_start %(endpoint_name)s ===*/
%(__snippet)s""",
		"EP_END": """
		/*=== d2r_end %(endpoint_name)s ===*/
	} );
};
""",
}